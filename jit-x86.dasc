#include <stdint.h>
#include "util.h"

|.arch x86
|.actionlist actions
|
|// Use ebx as our cell pointer.
|// Since ebx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, ebx
|

#define Dst &state
#define MAX_NESTING 256

int continuous_count(char *p)
{
    char *ptr = p;
    int count = 0;
    while (*ptr == *p) {
        count++;
        ptr++;
    }
    return count;
}

int check_loops(char *p,int *index,int *mult)
{
    int res,offset = 0,_index = 0;
    if (*(p+1) != '-') return -1;
    p += 2;
    while (*p != ']') {
        if (*p == '[' || *p == '-' ||
            *p == '.' || *p == ',')
            return -1;
        res = continuous_count(p);
        if (*p == '>') offset += res;
        else if (*p == '<') offset -= res;
        else if (*p == '+') {
            index[_index] = offset;
            mult[_index] = res;
            _index++;
        }
        p += res;
   }
   if (offset != 0) return -1;
   return _index;
}

int scan_loop(char *p, char *brainfuck_ptr, int brainfuck_size)
{
    char *ptr = p;
    int right = 0, count_scan = 0;
    ptr++;
    if (*ptr == '>')
	right++;
    while (*ptr != ']') {
	if (*ptr != '>' || *ptr != '<') {
	    if (*ptr != '\n')
		return 0;
	    ptr++;
	}
	ptr++;
    }
    p = ptr;   // at ']'
    /* scan right */
    if ( right != 0) {
	count_scan = (memchr(brainfuck_ptr, 0, brainfuck_size) - brainfuck_ptr);
	brainfuck_ptr += count_scan;
	return count_scan;
    }
    /* scan left */
    count_scan = (memrchr(brainfuck_ptr, 0, brainfuck_size) - brainfuck_ptr);
    brainfuck_ptr += count_scan;
    return count_scan;
}



int main(int argc, char *argv[])
{
	if (argc < 2) err("Usage: jit-x86 <inputfile>");
	dasm_State *state;
	initjit(&state, actions);

	unsigned int maxpc = 0;
	int pcstack[MAX_NESTING];
	int *top = pcstack, *limit = pcstack + MAX_NESTING;

	// Function prologue.
	|  push ebp
	|  mov  ebp, esp
	|  sub  esp, 8
	|  mov  [ebp - 4], PTR
	|  mov  eax, [ebp + 8]
	|  mov  PTR, eax

        int count_add, count_sub, count_inc, count_dec, count_scan, _index;

	char *brainfuck_ptr = (char *) malloc(sizeof(char));  
	int brainfuck_size = 1;

	for (char *p = read_file(argv[1]); *p; p++) {
		switch (*p) {
		case '>':
                        count_inc=continuous_count( p );
			|  add  PTR,count_inc
                        p+=(count_inc-1);
			brainfuck_ptr += count_inc;
			brainfuck_size += count_inc;
			break;
		case '<':
                        count_dec=continuous_count( p );
			|  sub  PTR,count_dec
                        p+=(count_dec-1);
			brainfuck_ptr -= count_dec;
			break;
		case '+':
                        count_add=continuous_count( p );
			|  add  byte [PTR],count_add
                        p+=(count_add-1);
			*brainfuck_ptr += count_add;
                        break;
			
		case '-':
                        count_sub=continuous_count( p );
			|  sub  byte [PTR],count_sub
                        p+=(count_sub-1);
			*brainfuck_ptr -= count_sub;
			break;
		case '.':
			|  movzx eax, byte [PTR]
			|  mov   [esp], eax
			|  call  &putchar
			break;
		case ',':
			|  call  &getchar
			|  mov   byte [PTR], al
			break;
		case '[':
			if (top == limit) err("Nesting too deep.");

			count_scan = scan_loop(p, brainfuck_ptr, brainfuck_size);
			if (count_scan > 0) {
			    |  add  PTR,count_scan
			    break;
			}
			else if (count_scan < 0) {
			    count_scan = 0-count_scan;
			    |  sub  PTR,count_scan
			    break;
			}

			count=check_loop (p , index , mult);
			if (count == 0)
			{
			    p+=2;
			    | mov byte [PTR],0
			    break;
			}
			else if(count > 0)
			{
			    for(int i = 0;i < count; i++)
			    {
				if(mult[i] ==1)
				{
				    | add PTR,index[i]
				    | mov byte [PTR],*brainfuck_ptr
				}
				else
				{
				    | add PTR,index[i]
				    | imul byte [PTR],*brainfuck_ptr,mult[i]
				}
				
			    }
			}
			// Each loop gets two pclabels: at the beginning and end.
			// We store pclabel offsets in a stack to link the loop
			// begin and end together.
			else
			{
			    maxpc += 2;
			    *top++ = maxpc;
			    dasm_growpc(&state, maxpc);
			    |  cmp  byte [PTR], 0
		            |  je   =>(maxpc-2)
			    |=>(maxpc-1):
			    break;
			}
		case ']':
			if (top == pcstack) err("Unmatched ']'");
			top--;
			|  cmp  byte [PTR], 0
			|  jne  =>(*top-1)
			|=>(*top-2):
			break;
		}
	}

	// Function epilogue.
	|  mov  eax, [ebp - 4]
	|  mov  PTR, eax
	|  leave
	|  ret

	void (*fptr)(char*) = jitcode(&state);
	char *mem = calloc(30000, 1);
	fptr(mem);
	free(mem);
	free_jitcode(fptr);
	return 0;
}
